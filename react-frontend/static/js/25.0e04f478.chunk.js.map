{"version":3,"sources":["views/users/FoodOrderHistory.js"],"names":["Container","Styled","div","BigText","p","Listing","ul","Detailevents","Button","Data","location","state","useState","BookingDetail","setBookingDetail","history","useHistory","bookings","useSelector","useEffect","length","map","items","_id","data","React","useMemo","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","backgroundColor","borderRadius","minHeight","width","padding","marginTop","marginBottom","boxSizing","display","flexDirection","alignItems","position","onClick","goBack","left","top","cursor","zIndex","fontSize","textAlign","timeStart","completed","accepted","bookingProcess","locations","time","status","photographerId","fname","generatePDF","float","marginLeft","color","FoodOrderHistory","props","match","setBookings","dispatch","useDispatch","CurrentUser","user","currentUser","token","getSesssionHistory","a","axios","get","process","headers","authorization","then","res","console","log","userData","GETMYBOOKINGSUCCESS","catch","err","response","message","Cell","row","original","border","push","pathname","url","exact","path","overflowX","maxWidth","headerGroup","className","getHeaderGroupProps","column","getHeaderProps","height","render","getRowProps","cells","cell","getCellProps","component"],"mappings":"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","file":"static/js/25.0e04f478.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { GETMYBOOKINGSUCCESS } from \"../../redux/action\";\r\nimport axios from \"axios\";\r\n\r\nimport Moment from \"react-moment\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport generatePDF from \"../pages/generatePdf\";\r\nimport { useTable } from \"react-table\";\r\nconst Container = Styled.div`\r\nwidth:100%;\r\ndisplay:flex;\r\nflex-direction:column;\r\npadding-bottom:20px;\r\nalign-items:center;\r\nbackground-color:#f1f0f0;\r\nmin-height:440px;\r\npadding-top:10px;\r\n`;\r\nconst BigText = Styled.p`\r\nfont-size:20px;\r\ncolor:grey;\r\nfont-weight:500;\r\n`;\r\nconst Smalltext = Styled.p`\r\nfont-size:14px;\r\ncolor:grey;\r\nfont-weight:500;\r\n`;\r\nconst Listing = Styled.ul`\r\nmargin-top:5px;\r\ndisplay:flex;\r\nflex-direction:column;\r\nalign-items:flex-start;\r\nbackground-color: #fffffff;\r\npadding:0px;\r\nwidth:95%;\r\nli{\r\n\tlist-style:none;\r\n\tfont-size:18px;\r\n\twidth:100%;\r\n  padding:10px;\r\n  border-radius:4px;\r\n  box-sizing:border-box;\r\n\tbackground-color: #ffff;\r\n\tcolor:grey;\r\n\tmargin-top:1.7px;\r\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n\tmargin-bottom:4px;\r\n  small{\r\n    font-size:14px;\r\n  }\r\n}\r\n`;\r\nconst Buttons = Styled(Button)`\r\n  && {\r\n\r\n\r\nmargin-top:8px;\r\n    color: rgb(190, 10, 10);\r\n    border-color: rgb(190, 10, 10);\r\n    &:focus {\r\n      background-color: white;\r\n    }\r\n    // @media (max-width: 1100px) {\r\n    //   display: none;\r\n    // }\r\n  }\r\n`;\r\n// const ButtonsStyle = {\r\n// \tmarginTop: '50px',\r\n// \tmarginLeft: '80px',\r\n// }\r\nconst Detailevents = ({\r\n  location: {\r\n    state: { Data },\r\n  },\r\n}) => {\r\n  const [BookingDetail, setBookingDetail] = useState({});\r\n\r\n  let history = useHistory();\r\n  let bookings = useSelector((state) => state.bookings);\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    bookings.length &&\r\n      bookings.map((items) => {\r\n        // console.log(items)\r\n        return items._id === Data._id && setBookingDetail(items);\r\n      });\r\n  }, [bookings, Data._id]);\r\n\r\n  const handlePdfDownload = () => {\r\n    BookingDetail.bookingProcess && generatePDF(BookingDetail.bookingProcess);\r\n  };\r\n\r\n  const data = React.useMemo(\r\n    () => [\r\n      // {\r\n      //   col1: \"Minsk\",\r\n      //   col2: \"27\",\r\n      //   col3: \"rain\",\r\n\r\n      // },\r\n      BookingDetail,\r\n    ],\r\n    [BookingDetail]\r\n  );\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"location\",\r\n        accessor: \"address\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"location details\",\r\n        accessor: \"bookingProcess.AdditionalAddress\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Category\",\r\n        accessor: \"bookingProcess.category\",\r\n      },\r\n      {\r\n        Header: \"Purpose\",\r\n        accessor: \"bookingProcess.purpose\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Amount(NGN)\",\r\n        accessor: \"bookingProcess.price\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: \"bookingProcess.status\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"payment type\",\r\n        accessor: \"bookingProcess.payment_type\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Event Date\",\r\n        accessor: \"bookingProcess.date\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Event Duration\",\r\n        accessor: \"bookingProcess.duration\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Event time(24h)\",\r\n        accessor: \"bookingProcess.time\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Photographer Name\",\r\n        accessor: \"bookingProcess.choosenPhotoGrapher.fname\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Photographer no.\",\r\n        accessor: \"bookingProcess.choosenPhotoGrapher.mobile\", // accessor is the \"key\" in the data\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data });\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#ffffff\",\r\n        borderRadius: \"12px\",\r\n        minHeight: \"560px\",\r\n        width: \"94%\",\r\n        padding: \"10px\",\r\n        marginTop: \"20px\",\r\n        marginBottom: \"20px\",\r\n        boxSizing: \"border-box\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <div\r\n        onClick={history.goBack}\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"50px\",\r\n          top: \"18px\",\r\n          cursor: \"pointer\",\r\n          zIndex: 3,\r\n        }}\r\n      >\r\n        <ArrowBackIcon style={{ fontSize: \"30px\" }} />\r\n      </div>\r\n      <BigText style={{ textAlign: \"center\" }}>Details</BigText>\r\n\r\n      {/* <div style={{ overflowX: \"scroll\", maxWidth: \"90vw\" }}>\r\n        <table {...getTableProps()} style={{ border: \"solid 1px black\" }}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th\r\n                    {...column.getHeaderProps()}\r\n                    style={{\r\n                      // border: \"solid 3px red\",\r\n\r\n                      color: \"#ffffff\",\r\n                      backgroundColor: \"rgb(0, 162, 149)\",\r\n                    }}\r\n                  >\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps()}\r\n                        style={{\r\n                          padding: \"10px\",\r\n                          border: \"solid 1px gray\",\r\n                        }}\r\n                      >\r\n                        {cell.render(\"Cell\")}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div> */}\r\n      {/* <div style={{ height: \"30px\" }} /> */}\r\n      <Listing>\r\n        <li style={{ minHeight: \"400px\" }}>\r\n          <br />\r\n          {BookingDetail.timeStart && (\r\n            <>\r\n              {\" \"}\r\n              <small>\r\n                Event started at:{\"   \"}\r\n                <Moment>{`${BookingDetail.timeStart}`}</Moment>\r\n              </small>\r\n              <br />\r\n            </>\r\n          )}\r\n\r\n          <small>\r\n            Event Status:{\"   \"}\r\n            {BookingDetail.completed\r\n              ? \"ended\"\r\n              : null || BookingDetail.accepted\r\n              ? \"processing\"\r\n              : \"pending\"}\r\n          </small>\r\n          <br />\r\n          <small>\r\n            Address :\r\n            {BookingDetail.bookingProcess &&\r\n              BookingDetail.bookingProcess.locations}\r\n          </small>\r\n          <br />\r\n          <small>\r\n            Event Time:{\"   \"}\r\n            {BookingDetail.bookingProcess && BookingDetail.bookingProcess.time}\r\n          </small>\r\n          <br />\r\n          <small>\r\n            Payment status:{\"   \"}\r\n            {BookingDetail.bookingProcess &&\r\n              BookingDetail.bookingProcess.status}\r\n          </small>\r\n          <br />\r\n          <small>\r\n            Shots by:{\"   \"}\r\n            {BookingDetail.photographerId && BookingDetail.photographerId.fname}\r\n          </small>\r\n          <br />\r\n          <Button\r\n            onClick={handlePdfDownload}\r\n            style={{\r\n              float: \"inline-end\",\r\n              marginLeft: \"30px\",\r\n              backgroundColor: \"dodgerblue\",\r\n              color: \"#ffffff\",\r\n              fontSize: \"9px\",\r\n              marginTop: \"120px\",\r\n            }}\r\n          >\r\n            Download Ticket\r\n          </Button>\r\n        </li>\r\n        <br />\r\n      </Listing>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FoodOrderHistory = (props) => {\r\n  const { match, history } = props;\r\n  const [bookings, setBookings] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const CurrentUser = useSelector((state) => state.user.currentUser);\r\n  const token = CurrentUser && CurrentUser.token;\r\n  // getSesssionHistory\r\n  const getSesssionHistory = async () => {\r\n    await axios\r\n      .get(\r\n        `${process.env.REACT_APP_API_URL}/users/getSesssionHistory`,\r\n\r\n        {\r\n          headers: { authorization: token },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        // setBookinmgs(res.data.userData)\r\n        setBookings(res.data.userData);\r\n        dispatch(GETMYBOOKINGSUCCESS(res.data.userData));\r\n        // setIsregistered(true)\r\n        // history.push('/dashboard')\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          console.log(err.response.data.message);\r\n          // err.response.data.message &&\r\n\r\n          // err.response.data.error && setIsregistered(false)\r\n        }\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSesssionHistory();\r\n  }, []);\r\n  const BookingCards = ({ item }) => {\r\n    return (\r\n      <>\r\n        <li>\r\n          <small>\r\n            request status: {!item.accepted ? \"pending\" : \"accepted\"}\r\n          </small>\r\n          <br />\r\n          <small>Address : {item.address}</small> <br />\r\n          <small>Mobile : {item.photographerId.mobile}</small>\r\n          <br />\r\n          <small>Date : {item.bookingDate.substring(0, 10)}</small>\r\n          <span>\r\n            <Buttons\r\n              style={{\r\n                marginLeft: \"100px\",\r\n                fontSize: \"9px\",\r\n              }}\r\n              onClick={() =>\r\n                history.push({\r\n                  pathname: `${match.url}/info`,\r\n                  state: { Data: item },\r\n                })\r\n              }\r\n            >\r\n              View Details\r\n            </Buttons>\r\n          </span>\r\n        </li>\r\n      </>\r\n    );\r\n  };\r\n  const MapBookings = () => {\r\n    return (\r\n      bookings.length > 0 &&\r\n      bookings.map((item) => {\r\n        return <BookingCards item={item} />;\r\n      })\r\n    );\r\n  };\r\n  const data = React.useMemo(\r\n    () => [\r\n      // {\r\n      //   col1: \"Minsk\",\r\n      //   col2: \"27\",\r\n      //   col3: \"rain\",\r\n\r\n      // },\r\n      ...bookings,\r\n    ],\r\n    [bookings]\r\n  );\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"location\",\r\n        accessor: \"address\", // accessor is the \"key\" in the data\r\n      },\r\n      // {\r\n      //   Header: \"location details\",\r\n      //   accessor: \"bookingProcess.AdditionalAddress\", // accessor is the \"key\" in the data\r\n      // },\r\n      // {\r\n      //   Header: \"Category\",\r\n      //   accessor: \"bookingProcess.category\",\r\n      // },\r\n      // {\r\n      //   Header: \"Purpose\",\r\n      //   accessor: \"bookingProcess.purpose\", // accessor is the \"key\" in the data\r\n      // },\r\n      // {\r\n      //   Header: \"Amnt. paid(NGN)\",\r\n      //   accessor: \"bookingProcess.amountPaid\", // accessor is the \"key\" in the data\r\n      // },\r\n      // {\r\n      //   Header: \"Status\",\r\n      //   accessor: \"bookingProcess.status\", // accessor is the \"key\" in the data\r\n      // },\r\n      // {\r\n      //   Header: \"payment type\",\r\n      //   accessor: \"bookingProcess.payment_type\", // accessor is the \"key\" in the data\r\n      // },\r\n      {\r\n        Header: \"Event Date\",\r\n        accessor: \"bookingProcess.date\", // accessor is the \"key\" in the data\r\n      },\r\n      // {\r\n      //   Header: \"Event Duration\",\r\n      //   accessor: \"bookingProcess.duration\", // accessor is the \"key\" in the data\r\n      // },\r\n      // {\r\n      //   Header: \"Event time(24h)\",\r\n      //   accessor: \"bookingProcess.time\", // accessor is the \"key\" in the data\r\n      // },\r\n      {\r\n        Header: \"Photographer Name\",\r\n        accessor: \"bookingProcess.choosenPhotoGrapher.fname\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Photographer no.\",\r\n        accessor: \"bookingProcess.choosenPhotoGrapher.mobile\", // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Event Status\",\r\n        accessor: \"bookingProcess._id\", // accessor is the \"key\" in the data\r\n        Cell: ({ row }) =>\r\n          // <a href=\"#\" onClick={() => console.log(row.original)}>\r\n          //   View\r\n          // </a>\r\n          row.original.completed\r\n            ? \"ended\"\r\n            : null || row.original.accepted\r\n            ? \"accepted\"\r\n            : \"pending\",\r\n      },\r\n      {\r\n        Header: \"Details\",\r\n        // accessor: \"bookingProcess._id\", // accessor is the \"key\" in the data\r\n        Cell: ({ row }) => (\r\n          <button\r\n            style={{\r\n              border: \"none\",\r\n              backgroundColor: \"inherit\",\r\n\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => {\r\n              console.log(row.original);\r\n              history.push({\r\n                pathname: `${match.url}/info`,\r\n                state: { Data: row.original },\r\n              });\r\n            }}\r\n          >\r\n            View\r\n          </button>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <Container>\r\n      <Switch>\r\n        <Route exact path={match.url}>\r\n          <div\r\n            style={{\r\n              backgroundColor: \"#ffffff\",\r\n              borderRadius: \"8px\",\r\n              minHeight: \"560px\",\r\n              width: \"94%\",\r\n              padding: \"10px\",\r\n              marginTop: \"20px\",\r\n              boxSizing: \"border-box\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <BigText style={{ fontSize: \"15px\" }}>My booking History</BigText>\r\n            {/* <Listing>\r\n              {bookings.length > 0 ? MapBookings() : <small>empty</small>}\r\n            </Listing> */}\r\n            <div style={{ overflowX: \"auto\", maxWidth: \"90%\" }}>\r\n              <table {...getTableProps()} style={{ border: \"none\" }}>\r\n                <thead>\r\n                  {headerGroups.map((headerGroup) => (\r\n                    <tr\r\n                      className=\"mytablerow\"\r\n                      {...headerGroup.getHeaderGroupProps()}\r\n                    >\r\n                      {headerGroup.headers.map((column) => (\r\n                        <th\r\n                          {...column.getHeaderProps()}\r\n                          style={{\r\n                            // border: \"solid 3px red\",\r\n                            color: \"grey\",\r\n                            height: \"40px\",\r\n                            fontSize: \"12px\",\r\n                            padding: \"10px\",\r\n                            borderRadius: \"2px\",\r\n                            boxSizing: \"border-box\",\r\n                            backgroundColor: \"#e0dede\",\r\n                          }}\r\n                        >\r\n                          {column.render(\"Header\")}\r\n                        </th>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                  {rows.map((row) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <tr className=\"tableRowdata\" {...row.getRowProps()}>\r\n                        {row.cells.map((cell) => {\r\n                          return (\r\n                            <td\r\n                              {...cell.getCellProps()}\r\n                              style={{\r\n                                padding: \"3px\",\r\n                                boxSizing: \"border-box\",\r\n                                fontSize: \"13px\",\r\n                                border: \"none\",\r\n                              }}\r\n                            >\r\n                              {cell.render(\"Cell\")}\r\n                            </td>\r\n                          );\r\n                        })}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </Route>\r\n\r\n        <Route path={`${match.url}/info`} component={Detailevents} />\r\n      </Switch>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FoodOrderHistory;\r\n"],"sourceRoot":""}