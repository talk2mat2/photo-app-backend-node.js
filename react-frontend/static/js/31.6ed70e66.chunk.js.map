{"version":3,"sources":["views/users/Support.js"],"names":["Container","Styled","div","BigText","p","Listing","ul","DetailMessages","Button","data","location","state","history","useHistory","onClick","goBack","style","position","left","top","cursor","fontSize","title","body","Support","props","CurrentUser","useSelector","user","currentUser","token","bookings","useState","setLoading","MessageState","setMessageState","match","item","FetchMessages","id","a","axios","get","process","headers","authorization","then","res","console","log","userData","catch","err","response","message","useEffect","backgroundColor","borderRadius","minHeight","width","padding","marginTop","marginBottom","boxSizing","display","flexDirection","alignItems","exact","path","url","length","map","to","pathname","className","textDecoration","slice","sender","fname","component"],"mappings":"qlCAOA,IAAMA,EAAYC,IAAOC,IAAV,KASTC,EAAUF,IAAOG,EAAV,KAKPC,EAAUJ,IAAOK,GAAV,KAgCPC,GAnBUN,YAAOO,IAAPP,CAAH,KAmBU,SAAC,GAIjB,IAFMQ,EAEP,EAHJC,SACEC,MAASF,KAGPG,EAAUC,cACd,OACE,qCACE,qBACEC,QAASF,EAAQG,OACjBC,MAAO,CACLC,SAAU,WACVC,KAAM,OACNC,IAAK,OACLC,OAAQ,WANZ,SASE,cAAC,IAAD,CAAeJ,MAAO,CAAEK,SAAU,YAEpC,cAAClB,EAAD,UAAUM,EAAKa,QACf,cAACjB,EAAD,UACE,6BACE,gCAAQI,EAAKc,gBAqGRC,UA/FC,SAACC,GACf,IAAMC,EAAcC,aAAY,SAAChB,GAAD,OAAWA,EAAMiB,KAAKC,eAEhDC,GADWH,aAAY,SAAChB,GAAD,OAAWA,EAAMoB,YAChCL,GAAeA,EAAYI,OAHhB,EAIKE,qBAJL,mBAITC,GAJS,aAKeD,mBAAS,IALxB,mBAKlBE,EALkB,KAKJC,EALI,KAMFC,GAAUX,EAAzBY,KAAyBZ,EAAnBb,QAAmBa,EAAVW,OACjBE,EAAa,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACpBP,GAAW,GADS,SAEdQ,IACHC,IADG,UAECC,GAFD,wBAIF,CACEC,QAAS,CAAEC,cAAef,KAG7BgB,MAAK,SAACC,GACLd,GAAW,GACXe,QAAQC,IAAIF,EAAItC,MAChB0B,EAAgBY,EAAItC,KAAKyC,aAE1BC,OAAM,SAACC,GACNnB,GAAW,GACPmB,EAAIC,UACNL,QAAQC,IAAIG,EAAIC,SAAS5C,KAAK6C,SAEhCN,QAAQC,IAAIG,MApBI,2CAAH,sDAkDnB,OAHAG,qBAAU,WACRjB,MACC,IAED,cAACtC,EAAD,UACE,qBACEgB,MAAO,CACLwC,gBAAiB,UACjBC,aAAc,OACdC,UAAW,QACXC,MAAO,MACPC,QAAS,OACTC,UAAW,OACXC,aAAc,OACdC,UAAW,aACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UAZhB,SAeE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMhC,EAAMiC,IAAzB,SACE,qCACG,IACD,cAAClE,EAAD,CAASa,MAAO,CAAEK,SAAU,QAA5B,sBACA,cAAChB,EAAD,UACG6B,EAAaoC,OAAS,EA/CjCpC,EAAaoC,OAAS,GACtBpC,EAAaqC,KAAI,SAAClC,GAChB,OACE,cAAC,IAAD,CACEmC,GAAI,CACFC,SAAS,GAAD,OAAKrC,EAAMiC,IAAX,YACR1D,MAAO,CAAEF,KAAM4B,IAHnB,SAME,qBAAIqC,UAAU,WAAW1D,MAAO,CAAE2D,eAAgB,aAAlD,UACGtC,EAAKf,MAAMsD,MAAM,EAAG,IAAK,IAC1B,oBAAGF,UAAU,WAAb,mBACSrC,EAAKwC,OAAOC,OAASzC,EAAKwC,OAAOC,iBAsCtC,mEAKR,cAAC,IAAD,CAAOV,KAAI,UAAKhC,EAAMiC,IAAX,YAA0BU,UAAWxE","file":"static/js/31.6ed70e66.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nconst Container = Styled.div`\r\nwidth:100%;\r\ndisplay:flex;\r\nflex-direction:column;\r\nalign-items:center;\r\nbackground-color:#f1f0f0;\r\nmin-height:440px;\r\npadding-top:10px;\r\n`;\r\nconst BigText = Styled.p`\r\nfont-size:20px;\r\ncolor:grey;\r\nfont-weight:500;\r\n`;\r\nconst Listing = Styled.ul`\r\nmargin-top:20px;\r\ndisplay:flex;\r\nflex-direction:column;\r\nalign-items:flex-start;\r\npadding:0px;\r\nwidth:95%;\r\nli{\r\n\tlist-style:none;\r\n\tfont-size:18px;\r\n\tcolor:grey;\r\n}\r\n`;\r\nconst Buttons = Styled(Button)`\r\n  && {\r\n\r\n\r\nmargin-top:8px;\r\n    color: rgb(190, 10, 10);\r\n    border-color: rgb(190, 10, 10);\r\n    &:focus {\r\n      background-color: white;\r\n    }\r\n    // @media (max-width: 1100px) {\r\n    //   display: none;\r\n    // }\r\n  }\r\n`;\r\nconst ButtonsStyle = {\r\n  marginTop: \"50px\",\r\n  marginLeft: \"80px\",\r\n};\r\nconst DetailMessages = ({\r\n  location: {\r\n    state: { data },\r\n  },\r\n}) => {\r\n  let history = useHistory();\r\n  return (\r\n    <>\r\n      <div\r\n        onClick={history.goBack}\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"60px\",\r\n          top: \"40px\",\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        <ArrowBackIcon style={{ fontSize: \"30px\" }} />\r\n      </div>\r\n      <BigText>{data.title}</BigText>\r\n      <Listing>\r\n        <li>\r\n          <small>{data.body}</small>\r\n        </li>\r\n      </Listing>\r\n    </>\r\n  );\r\n};\r\nconst Support = (props) => {\r\n  const CurrentUser = useSelector((state) => state.user.currentUser);\r\n  const bookings = useSelector((state) => state.bookings);\r\n  const token = CurrentUser && CurrentUser.token;\r\n  const [loading, setLoading] = useState();\r\n  const [MessageState, setMessageState] = useState({});\r\n  const { item, history, match } = props;\r\n  const FetchMessages = async (id) => {\r\n    setLoading(true);\r\n    await axios\r\n      .get(\r\n        `${process.env.REACT_APP_API_URL}/users/FetchMessages`,\r\n\r\n        {\r\n          headers: { authorization: token },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        setLoading(false);\r\n        console.log(res.data);\r\n        setMessageState(res.data.userData);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        if (err.response) {\r\n          console.log(err.response.data.message);\r\n        }\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const mapMessages = () => {\r\n    return (\r\n      MessageState.length > 0 &&\r\n      MessageState.map((item) => {\r\n        return (\r\n          <Link\r\n            to={{\r\n              pathname: `${match.url}/details`,\r\n              state: { data: item },\r\n            }}\r\n          >\r\n            <li className=\"menuitem\" style={{ textDecoration: \"underline\" }}>\r\n              {item.title.slice(0, 29)}{\" \"}\r\n              <p className=\"menuitem\">\r\n                from -{item.sender.fname && item.sender.fname}\r\n              </p>\r\n            </li>\r\n          </Link>\r\n        );\r\n      })\r\n    );\r\n    // MessageState.length<0&&<p>no new message</p>\r\n  };\r\n  useEffect(() => {\r\n    FetchMessages();\r\n  }, []);\r\n  return (\r\n    <Container>\r\n      <div\r\n        style={{\r\n          backgroundColor: \"#ffffff\",\r\n          borderRadius: \"12px\",\r\n          minHeight: \"560px\",\r\n          width: \"94%\",\r\n          padding: \"10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"20px\",\r\n          boxSizing: \"border-box\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Switch>\r\n          <Route exact path={match.url}>\r\n            <>\r\n              {\" \"}\r\n              <BigText style={{ fontSize: \"16px\" }}>Messages</BigText>\r\n              <Listing>\r\n                {MessageState.length > 0 ? (\r\n                  mapMessages()\r\n                ) : (\r\n                  <li>No new messages availaible</li>\r\n                )}\r\n              </Listing>\r\n            </>\r\n          </Route>\r\n          <Route path={`${match.url}/details`} component={DetailMessages} />\r\n        </Switch>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Support;\r\n"],"sourceRoot":""}